package main

import (
	"fmt"
	"log"
	"mapreduce"
	"os"
	"strconv"
	"strings"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	/* Split the contents into words */
	isLetter := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	wordList := strings.FieldsFunc(contents, isLetter)

	/* Count words */
	countMap := make(map[string]int)
	for _, word := range wordList {
		countMap[word] += 1
	}

	/* return KeyValue result */
	var result []mapreduce.KeyValue
	for key, value := range countMap {
		result = append(result, mapreduce.KeyValue{key, strconv.Itoa(value)})
	}

	return result
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	var total int
	for _, count := range values {
		countI, err := strconv.Atoi(count)
		if err != nil {
			log.Printf(
				"reduceF: convert `%s` to number failed, err: `%v`",
				count, err)
			/* Just return 0 when error occur */
			return "0"
		}
		total += countI
	}

	return strconv.Itoa(total)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
