package main

import (
	"fmt"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"

	"mapreduce"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	/* Split the value into words */
	isLetter := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	wordList := strings.FieldsFunc(value, isLetter)

	/* Remove duplicate */
	unique := make(map[string]bool)
	for _, word := range wordList {
		unique[word] = true
	}

	/* return KeyValue result */
	var result []mapreduce.KeyValue
	for key := range unique {
		result = append(result, mapreduce.KeyValue{key, document})
	}

	return result
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	/* Remove duplicate */
	docMap := make(map[string]bool)
	for _, doc := range values {
		docMap[doc] = true
	}

	/* Sort doc */
	kList := make([]string, 0)
	for key := range docMap {
		kList = append(kList, key)
	}
	sort.Strings(kList)

	/* return "count + doc list" */
	count := strconv.Itoa(len(docMap))
	docList := ""
	for _, doc := range kList {
		docList += doc + ","
	}

	return count + " " + strings.TrimRight(docList, ",")
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
